// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Intent")));
bytes32 constant IntentTableId = _tableId;

struct IntentData {
  uint8 intents;
  uint8[4] actions;
}

library Intent {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT8_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](0);

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](2);
    _fieldNames[0] = "intents";
    _fieldNames[1] = "actions";
    return ("Intent", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get intents */
  function getIntents() internal view returns (uint8 intents) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get intents (using the specified store) */
  function getIntents(IStore _store) internal view returns (uint8 intents) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set intents */
  function setIntents(uint8 intents) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((intents)));
  }

  /** Set intents (using the specified store) */
  function setIntents(IStore _store, uint8 intents) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((intents)));
  }

  /** Get actions */
  function getActions() internal view returns (uint8[4] memory actions) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return toStaticArray_uint8_4(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /** Get actions (using the specified store) */
  function getActions(IStore _store) internal view returns (uint8[4] memory actions) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return toStaticArray_uint8_4(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /** Set actions */
  function setActions(uint8[4] memory actions) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_uint8_4(actions)));
  }

  /** Set actions (using the specified store) */
  function setActions(IStore _store, uint8[4] memory actions) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_uint8_4(actions)));
  }

  /** Get the length of actions */
  function lengthActions() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of actions (using the specified store) */
  function lengthActions(IStore _store) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of actions (unchecked, returns invalid data if index overflows) */
  function getItemActions(uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get an item of actions (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemActions(IStore _store, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Push an element to actions */
  function pushActions(uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /** Push an element to actions (using the specified store) */
  function pushActions(IStore _store, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /** Pop an element from actions */
  function popActions() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Pop an element from actions (using the specified store) */
  function popActions(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Update an element of actions at `_index` */
  function updateActions(uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 1, abi.encodePacked((_element)));
  }

  /** Update an element of actions (using the specified store) at `_index` */
  function updateActions(IStore _store, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.updateInField(_tableId, _keyTuple, 1, _index * 1, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get() internal view returns (IntentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store) internal view returns (IntentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint8 intents, uint8[4] memory actions) internal {
    bytes memory _data = encode(intents, actions);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, uint8 intents, uint8[4] memory actions) internal {
    bytes memory _data = encode(intents, actions);

    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(IntentData memory _table) internal {
    set(_table.intents, _table.actions);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, IntentData memory _table) internal {
    set(_store, _table.intents, _table.actions);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (IntentData memory _table) {
    // 1 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 1));

    _table.intents = (uint8(Bytes.slice1(_blob, 0)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 1) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 33;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.actions = toStaticArray_uint8_4(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint8());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(uint8 intents, uint8[4] memory actions) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(actions.length * 1);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(intents, _encodedLengths.unwrap(), EncodeArray.encode(fromStaticArray_uint8_4(actions)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple() internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](0);
  }

  /* Delete all data for given keys */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function toStaticArray_uint8_4(uint8[] memory _value) pure returns (uint8[4] memory _result) {
  // in memory static arrays are just dynamic arrays without the length byte
  assembly {
    _result := add(_value, 0x20)
  }
}

function fromStaticArray_uint8_4(uint8[4] memory _value) view returns (uint8[] memory _result) {
  _result = new uint8[](4);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 128);
}
